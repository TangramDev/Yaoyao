/********************************************************************************
*					Open Universe - version 1.0.1.8							*
*********************************************************************************
* Copyright (C) 2002-2020 by Tangram Team.   All Rights Reserved.				*
*
* THIS SOURCE FILE IS THE PROPERTY OF TANGRAM TEAM AND IS NOT TO
* BE RE-DISTRIBUTED BY ANY MEANS WHATSOEVER WITHOUT THE EXPRESSED
* WRITTEN CONSENT OF TANGRAM TEAM.
*
* THIS SOURCE CODE CAN ONLY BE USED UNDER THE TERMS AND CONDITIONS
* OUTLINED IN THE GPL LICENSE AGREEMENT.TANGRAM TEAM
* GRANTS TO YOU (ONE SOFTWARE DEVELOPER) THE LIMITED RIGHT TO USE
* THIS SOFTWARE ON A SINGLE COMPUTER.
*
* CONTACT INFORMATION:
* mailto:tangramteam@outlook.com or mailto:sunhuizlz@yeah.net
* https://www.tangram.dev
*
********************************************************************************/

// Universe.idl : IDL source for Universe
//

// This file will be processed by the MIDL tool to
// produce the type library (Universe.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

interface IGalaxyCluster;
interface IGrid;
interface IGalaxy;
interface IHubble;
interface IHubbleCtrl;
interface IWorkBenchWindow;
interface IHubbleTreeView;
interface IEclipseCtrl;
interface IHubbleDoc;
interface IWebPage;
interface IBrowser;
interface IGridCollection;

typedef
[
	helpstring("Open URL for Chromium Based WebBrowser")
]
enum BrowserWndOpenDisposition {
	UNKNOWN = 0x00000000,
	CURRENT_TAB = 0x00000001,
	// Indicates that only one tab with the url should exist in the same window.
	SINGLETON_TAB = 0x00000002,
	NEW_FOREGROUND_TAB = 0x00000003,
	NEW_BACKGROUND_TAB = 0x00000004,
	NEW_POPUP = 0x00000005,
	NEW_WINDOW = 0x00000006,
	SAVE_TO_DISK = 0x00000007,
	OFF_THE_RECORD = 0x00000008,
	IGNORE_ACTION = 0x00000009,
	// Activates an existing tab containing the url, rather than navigating.
	// This is similar to SINGLETON_TAB, but searches across all windows from
	// the current profile and anonymity (instead of just the current one);
	// closes the current tab on switching if the current tab was the NTP with
	// no session history; and behaves like CURRENT_TAB instead of
	// NEW_FOREGROUND_TAB when no existing tab is found.
	SWITCH_TO_TAB = 0x0000000a
	// Update when adding a new disposition.
}BrowserWndOpenDisposition;

typedef
[
	helpstring("")
]
enum GalaxyType
{
	MDIClientGalaxy = 0x00000000,
	MDIChildGalaxy = 0x00000001,
	SDIGalaxy = 0x00000002,
	CtrlBarGalaxy = 0x00000003,
	WinFormMDIClientGalaxy = 0x00000004,
	WinFormMDIChildGalaxy = 0x00000005,
	WinFormGalaxy = 0x00000006,
	EclipseWorkBenchGalaxy = 0x00000007,
	EclipseViewGalaxy = 0x00000008,
	EclipseSWTGalaxy = 0x00000009,
	WinFormControlGalaxy = 0x0000000a,
	TabbedMDIClientGalaxy = 0x0000000b,
	NOGalaxy = 0x0000010a
}GalaxyType;

typedef
[
	helpstring("")
]
enum ObjEventType
{
	TangramNode = 0x00000000,
	HubbleDocEvent = 0x00000001,
	TangramNodeAllChildNode = 0x00000002,
	HubbleDocAllGalaxyAllChildNode = 0x00000003,
	HubbleDocAllGalaxyAllTopGrid = 0x00000004,
	TangramGalaxyAllTopGridAllChildNode = 0x00000005,
	TangramGalaxyAllTopGrid = 0x00000006,
	GalaxyClusterAllGalaxyAllTopGridAllChildNode = 0x00000007,
	GalaxyClusterAllGalaxyAllTopGrid = 0x00000008,
	GalaxyClusterCtrlBarGalaxyAllTopGridAllChildNode = 0x00000009,
	GalaxyClusterCtrlBarGalaxyAllTopGrid = 0x0000000a,
	GalaxyClusterNotCtrlBarGalaxyAllTopGridAllChildNode = 0x0000000b,
	GalaxyClusterNotCtrlBarGalaxyAllTopGrid = 0x0000000c,
	HubbleDocAllCtrlBarGalaxyAllChildNode = 0x0000000d,
	HubbleDocAllCtrlBarGalaxy = 0x0000000e
}ObjEventType;

typedef
[
	helpstring("")
]
enum GridType
{
	BlankView = 0x00000001,
	ActiveX = 0x00000002,
	Grid = 0x00000004,
	TabGrid = 0x00000008,

	CLRCtrl = 0x00000010,
	CLRForm = 0x00000020,
	CLRWnd = 0x00000040,
	TangramView = 0x00000080,
	TangramTreeView = 0x0100,
	TangramListView = 0x0200,
	TabCtrl = 0x400,
	TangramWPFCtrl = 0x800
}GridType;

[
	object,
	uuid(19631222-1992-0612-1965-060120160101),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IHubbleExtender : IDispatch {
	[id(0)] HRESULT Close();
	[propget, id(1)] HRESULT ActiveWorkBenchWindow(BSTR bstrID, [out, retval] IWorkBenchWindow** pVal);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120160918),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IEclipseExtender : IHubbleExtender {
};

[
	object,
	uuid(19631222-1992-0612-1965-060119631222),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IOfficeExtender : IHubbleExtender {
	[id(101)] HRESULT AddVBAFormsScript(IDispatch* OfficeObject, BSTR bstrKey, BSTR bstrXml);
	[id(102)] HRESULT InitVBAForm([in] IDispatch* newVal, [in]long nStyle, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	[id(103)] HRESULT GetGalaxyFromVBAForm(IDispatch* pForm, [out, retval] IGalaxy** ppGalaxy);
	[id(104)] HRESULT GetActiveTopGrid(IDispatch* pForm, [out, retval] IGrid** WndGrid);
	[id(105)] HRESULT GetObjectFromWnd(LONG hWnd, [out, retval] IDispatch** ppObjFromWnd);
};

[
	object,
	uuid(19631222-1992-0612-1965-06011982C951),
	dual,
	nonextensible,
	helpstring("IHubbleTreeNode Interface"),
	pointer_default(unique)
]
interface IHubbleTreeNode : IDispatch {
};

[
	object,
	uuid(19631222-1992-0612-1965-0601198283A6),
	dual,
	nonextensible,
	helpstring("IHubbleTreeViewCallBack Interface"),
	pointer_default(unique)
]
interface IHubbleTreeViewCallBack : IDispatch {
	[propput, id(1), helpstring("property WndGrid")] HRESULT WndGrid(IGrid* newVal);
	[propget, id(2), helpstring("property Pages")] HRESULT Pages(long* retVal);
	[id(100), helpstring("method OnInitTreeView")] HRESULT OnInitTreeView(IHubbleTreeView* pTangramTreeView, BSTR bstrXml);
	[id(101), helpstring("method OnClick")] HRESULT OnClick(BSTR bstrXml, BSTR bstrXmlData);
	[id(102), helpstring("method OnInit")] HRESULT OnInit(BSTR bstrXml);
	[id(103), helpstring("method OnNewPage")] HRESULT OnNewPage(int nNewPage);
	[id(104), helpstring("method HubbleAction")] HRESULT HubbleAction(BSTR bstrXml, [out, retval] BSTR* bstrRetXml);
};

[
	object,
	uuid(19631222-1992-0612-1965-0601198283A5),
	dual,
	nonextensible,
	helpstring("IHubbleTreeView Interface"),
	pointer_default(unique)
]
interface IHubbleTreeView : IDispatch {
	[propput, id(1), helpstring("property TangramTreeViewCallBack")] HRESULT TangramTreeViewCallBack(BSTR bstrKey, [in] IHubbleTreeViewCallBack* newVal);
	[propget, id(2), helpstring("property FirstRoot")] HRESULT FirstRoot([out, retval] long* pVal);
	[id(3), helpstring("method AddTreeNode")] HRESULT AddTreeNode(long hItem, BSTR bstrXml);
	[id(4), helpstring("method InsertNode")] HRESULT InsertNode(BSTR bstrXml, [out, retval] long* hItem);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120160928),
	dual,
	hidden,
	nonextensible,
	helpstring("IHubbleEventObj Interface"),
	pointer_default(unique)
]
interface IHubbleEventObj : IDispatch {
	[propget, id(0)] HRESULT eventSource([out, retval] IDispatch** pVal);
	[propput, id(0), helpstring("eventSource")] HRESULT eventSource([in] IDispatch* eventSource);
	[propget, id(1)] HRESULT Index([out, retval] int* nVal);
	[propput, id(1)] HRESULT Index(int newVal);
	[propget, id(2)] HRESULT EventName([out, retval] BSTR* pVal);
	[propput, id(2)] HRESULT EventName(BSTR newVal);
	[propget, id(3)] HRESULT Object(int nIndex, [out, retval] IDispatch** pVal);
	[propput, id(3)] HRESULT Object(int nIndex, IDispatch* newVal);
	[propget, id(4)] HRESULT Value(int nIndex, [out, retval] VARIANT* pVal);
	[propput, id(4)] HRESULT Value(int nIndex, VARIANT newVal);
}

[
	uuid(19631222-1992-0612-1965-060119820004),
	helpstring("IGrid Interface"),
	pointer_default(unique)
]
interface IGrid : IDispatch {
	[propget, id(1), helpstring("property ChildNodes")] HRESULT ChildNodes([out, retval]IGridCollection** ppGridColletion);
	[propget, id(2), helpstring("property Rows")] HRESULT Rows([out, retval]long* nRows);
	[propget, id(3), helpstring("property Cols")] HRESULT Cols([out, retval]long* nCols);
	[propget, id(4), helpstring("property Row")] HRESULT Row([out, retval]long* nRow);
	[propget, id(5), helpstring("property Col")] HRESULT Col([out, retval]long* nCol);
	[propget, id(6), helpstring("property NodeType")] HRESULT GridType([out, retval]GridType* nType);
	[propget, id(7), helpstring("property ParentGrid")] HRESULT ParentGrid([out, retval]IGrid** ppGrid);
	[propget, id(8)] HRESULT URL([out, retval] BSTR* pVal);
	[propput, id(8)] HRESULT URL([in] BSTR newVal);
	[propget, id(9)] HRESULT GalaxyCluster([out, retval] IGalaxyCluster** pVal);
	[propget, id(10), helpstring("property RootNode")] HRESULT RootGrid([out, retval]IGrid** ppGrid);
	[propget, id(11), helpstring("property XObject")] HRESULT XObject([out, retval] VARIANT* pVar);
	[propget, id(12), helpstring("property PlugIn")] HRESULT AxPlugIn([in] BSTR bstrPlugInName, [out, retval] IDispatch** pVal);
	[propget, id(13), helpstring("When this Node is Contained in a Tabbed Node, "
		"this property is the Tab Caption")] HRESULT Caption([out, retval] BSTR* pVal);
	[propput, id(13), helpstring("property Caption")] HRESULT Caption([in] BSTR bstrCaption);
	[propget, id(14), helpstring("property Name")] HRESULT Name([out, retval] BSTR* pVal);
	[propput, id(14), helpstring("property Name")] HRESULT Name([in] BSTR bstrName);
	[propget, id(15), helpstring("property Objects")] HRESULT Objects([in]long nType, [out, retval]IGridCollection** ppGridColletion);
	[propget, id(16), helpstring("property Handle")] HRESULT Handle([out, retval]LONGLONG* hWnd);
	[propget, id(17), helpstring("property Attribute")] HRESULT Attribute([in]BSTR bstrKey, [out, retval] BSTR* pVal);
	[propput, id(17), helpstring("property Attribute")] HRESULT Attribute([in]BSTR bstrKey, [in]BSTR bstrVal);
	[propget, id(18), helpstring("property Tag")] HRESULT Tag([out, retval] VARIANT* pVar);
	[propput, id(18), helpstring("property Tag")] HRESULT Tag([in] VARIANT vVar);
	[propget, id(19), helpstring("property OuterXml")] HRESULT OuterXml([out, retval] BSTR* pVal);
	[propget, id(20), helpstring("property Key")] HRESULT Key([out, retval] BSTR* pVal);
	[propget, id(21)] HRESULT DockObj(BSTR bstrName, [out, retval] LONGLONG* pVal);
	[propput, id(21)] HRESULT DockObj(BSTR bstrName, [in] LONGLONG newVal);
	[propget, id(22)] HRESULT NameAtWindowPage([out, retval] BSTR* pVal);
	[propget, id(23), helpstring("property Width")] HRESULT Width([out, retval] LONG* pVal);
	[propget, id(24), helpstring("property Height")] HRESULT Height([out, retval] LONG* pVal);
	[propget, id(25), helpstring("property Galaxy")] HRESULT Galaxy([out, retval] IGalaxy** pVal);
	[propget, id(26), helpstring("property XML")] HRESULT XML([out, retval] BSTR* pVal);
	[propget, id(27), helpstring("property Extender")] HRESULT Extender([out, retval] IDispatch** pVal);
	[propput, id(27), helpstring("property Extender")] HRESULT Extender([in] IDispatch* newVal);
	[propget, id(28)] HRESULT DocXml([out, retval] BSTR* pVal);
	[propget, id(29)] HRESULT rgbMiddle([out, retval] OLE_COLOR* pVal);
	[propput, id(29)] HRESULT rgbMiddle([in] OLE_COLOR newVal);
	[propget, id(30)] HRESULT rgbRightBottom([out, retval] OLE_COLOR* pVal);
	[propput, id(30)] HRESULT rgbRightBottom([in] OLE_COLOR newVal);
	[propget, id(31)] HRESULT rgbLeftTop([out, retval] OLE_COLOR* pVal);
	[propput, id(31)] HRESULT rgbLeftTop([in] OLE_COLOR newVal);
	[propget, id(32)] HRESULT Hmin([out, retval] int* pVal);
	[propput, id(32)] HRESULT Hmin([in] int newVal);
	[propget, id(33)] HRESULT Hmax([out, retval] int* pVal);
	[propput, id(33)] HRESULT Hmax([in] int newVal);
	[propget, id(34)] HRESULT Vmin([out, retval] int* pVal);
	[propput, id(34)] HRESULT Vmin([in] int newVal);
	[propget, id(35)] HRESULT Vmax([out, retval] int* pVal);
	[propput, id(35)] HRESULT Vmax([in] int newVal);
	[propget, id(36)] HRESULT HostGrid([out, retval] IGrid** pVal);
	[propput, id(36)] HRESULT HostGrid([in] IGrid* newVal);
	[propget, id(37)] HRESULT ActivePage([out, retval] int* pVal);
	[propput, id(37)] HRESULT ActivePage([in] int newVal);
	[propget, id(38), helpstring("property HostGalaxy")] HRESULT HostGalaxy([out, retval] IGalaxy** pVal);
	[propget, id(39)] HRESULT MasterRow([out, retval] int* pVal);
	[propput, id(39)] HRESULT MasterRow([in] int newVal);
	[propget, id(40)] HRESULT MasterCol([out, retval] int* pVal);
	[propput, id(40)] HRESULT MasterCol([in] int newVal);
	[propget, id(41), helpstring("property Office Object")] HRESULT OfficeObj([out, retval] IDispatch** pVal);
	[propput, id(42)] HRESULT SaveToConfigFile([in] VARIANT_BOOL newVal);

	[id(100), hidden] HRESULT ActiveTabPage(IGrid* pGrid);
	[id(101), helpstring("method GetNodes")] HRESULT GetGrids([in]BSTR bstrName, [out]IGrid** ppGrid, [out]IGridCollection** ppGrids, [out, retval]long* pCount);
	[id(102), helpstring("method GetNode")] HRESULT GetGrid([in]long nRow, [in]long nCol, [out, retval]IGrid** ppGrid);
	[id(103)] HRESULT GetCtrlByName(BSTR bstrName, VARIANT_BOOL bFindInChild, [out, retval] IDispatch** ppCtrlDisp);
	[id(104)] HRESULT SendIPCMessage(BSTR bstrTo, BSTR bstrPayload, BSTR bstrExtra, BSTR bstrMsgId, [out, retval] BSTR* bstrRes);
	[id(105)] HRESULT Observe(BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
	[id(106), helpstring("method LoadXML")] HRESULT LoadXML(int nType, BSTR bstrXML);
	[id(107)] HRESULT ObserveEx(int nRow, int nCol, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
	[id(108)] HRESULT GetGridByName([in]BSTR bstrName, [out, retval] IGridCollection** pVal);
	[id(109)] HRESULT GetCtrlValueByName(BSTR bstrName, VARIANT_BOOL bFindInChild, [out, retval] BSTR* bstrVal);
	[id(110)] HRESULT SetCtrlValueByName(BSTR bstrName, VARIANT_BOOL bFindInChild, BSTR bstrVal);
	[id(112)] HRESULT NavigateURL(BSTR bstrURL, IDispatch* dispObjforScript);
};

[
	object,
	uuid(19631222-1992-0612-1965-060119822007),
	dual,
	nonextensible,
	helpstring("IAppExtender Interface"),
	pointer_default(unique)
]
interface IAppExtender : IDispatch {
	[id(1), helpstring("method ProcessNotify")] HRESULT ProcessNotify([in]BSTR bstrXmlNotify);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120161101),
	dual,
	nonextensible,
	helpstring("IHubbleDoc Interface"),
	pointer_default(unique)
]
interface IHubbleDoc : IDispatch {
	[propget, id(1)] HRESULT TemplateXml([out, retval] BSTR* bstrVal);
	[propput, id(1)] HRESULT TemplateXml([in] BSTR newVal);
	[propput, id(2)] HRESULT DocType([in] BSTR newVal);
	[propget, id(3)] HRESULT DocID([out, retval] LONGLONG* pVal);
	[propput, id(3)] HRESULT DocID([in] LONGLONG newVal);

	[id(101)] HRESULT GetGalaxyWndXml(BSTR bstrWndID, [out, retval] BSTR* bstrWndScriptVal);
}

[
	object,
	uuid(19631222-1992-0612-1965-060120170707),
	dual,
	nonextensible,
	helpstring("IHubbleDocTemplate Interface"),
	pointer_default(unique)
]
interface IHubbleDocTemplate : IDispatch {
	[propget, id(1)] HRESULT TemplateXml([out, retval] BSTR* bstrVal);
	[propput, id(1)] HRESULT TemplateXml([in] BSTR newVal);
	[propput, id(2)] HRESULT DocType([in] BSTR newVal);
	[propget, id(3)] HRESULT DocID([out, retval] LONGLONG* pVal);
	[propput, id(3)] HRESULT DocID([in] LONGLONG newVal);

	[id(101)] HRESULT GetGalaxyWndXml(BSTR bstrWndID, [out, retval] BSTR* bstrWndScriptVal);
}

[
	object,
	uuid(19631222-1992-0612-1965-060119820001),
	dual,
	nonextensible,
	helpstring("IHubble Interface"),
	pointer_default(unique)
]
interface IHubble : IDispatch {
	[propget, id(1)] HRESULT HostChromeBrowserWnd([out, retval] IBrowser** ppChromeWebBrowser);
	[propget, id(2), helpstring("property AppKeyValue")] HRESULT AppKeyValue(BSTR bstrKey, [out, retval] VARIANT* pVal);
	[propput, id(2), helpstring("property AppKeyValue")] HRESULT AppKeyValue(BSTR bstrKey, [in] VARIANT newVal);
	[propget, id(3), helpstring("property AppExtender")] HRESULT AppExtender(BSTR bstrKey, [out, retval] IDispatch** pVal);
	[propput, id(3), helpstring("property AppExtender")] HRESULT AppExtender(BSTR bstrKey, [in] IDispatch* newVal);
	[propget, id(4), helpstring("property RootNodes")] HRESULT RootNodes([out, retval]IGridCollection** ppGridColletion);
	[propget, id(5)] HRESULT HostWnd([out, retval] LONGLONG* pVal);
	[propget, id(6), helpstring("property CurrentActiveNode")] HRESULT CurrentActiveGrid([out, retval] IGrid** pVal);
	[propget, id(7), helpstring("property CreatingNode")] HRESULT CreatingGrid([out, retval] IGrid** pVal);
	[propget, id(8)] HRESULT RemoteHubble(BSTR bstrID, [out, retval] IHubble** pVal);
	[propget, id(9)] HRESULT Extender([out, retval] IHubbleExtender** pVal);
	[propput, id(9)] HRESULT Extender([in] IHubbleExtender* newVal);
	[propget, id(10)] HRESULT RemoteHelperHWND([out, retval] LONGLONG* pVal);
	[propput, id(10)] HRESULT RemoteHelperHWND([in]LONGLONG newVal);
	[propget, id(11), hidden] HRESULT DesignNode([out, retval] IGrid** pVal);
	[propget, id(13)] HRESULT HubbleDoc(LONGLONG AppProxy, LONGLONG nDocID, [out, retval] IHubbleDoc** pVal);
	[propget, id(14)] HRESULT DocTemplate(BSTR bstrID, [out, retval] LONGLONG* pVal);
	[propget, id(15)] HRESULT ActiveChromeBrowserWnd([out, retval] IBrowser** ppChromeWebBrowser);

	[id(0x00100)] HRESULT NavigateNode(IGrid* pGrid, BSTR bstrBrowserID, BSTR bstrXml);
	[id(0x00101)] HRESULT CreateGalaxyCluster(LONGLONG hWnd, [out, retval]IGalaxyCluster** ppGalaxyCluster);
	[id(0x00102)] HRESULT CreateOfficeDocument(BSTR bstrXml);
	[id(0x00103), helpstring("method Create CLR Object")] HRESULT CreateCLRObj(BSTR bstrObjID, [out, retval]IDispatch** ppDisp);
	[id(0x00104)] HRESULT StartApplication(BSTR bstrAppID, BSTR bstrXml);
	[id(0x00105), helpstring("method GetGalaxy")] HRESULT GetGalaxy(LONGLONG hHostWnd, [out, retval] IGalaxy** ppGalaxy);
	[id(0x00106)] HRESULT GetItemText(IGrid* pGrid, long nCtrlID, LONG nMaxLengeh, [out, retval] BSTR* bstrRet);
	[id(0x00107)] HRESULT SetItemText(IGrid* pGrid, long nCtrlID, BSTR bstrText);
	[id(0x00108)] HRESULT GetCLRControl(IDispatch* CtrlDisp, BSTR bstrName, [out, retval] IDispatch** ppRetDisp);
	[id(0x00109), helpstring("method MessageBox")] HRESULT MessageBox(LONGLONG hWnd, BSTR bstrContext, BSTR bstrCaption, long nStyle, [out, retval] int* nRet);
	[id(0x0010a), helpstring("method Encode")] HRESULT Encode(BSTR bstrSRC, VARIANT_BOOL bEncode, [out, retval] BSTR* bstrRet);
	[id(0x0010b), helpstring("method SetHostFocus")] HRESULT SetHostFocus(void);
	[id(0x0010c)] HRESULT UpdateGrid(IGrid* pGrid);
	[id(0x0010d), helpstring("method NewGUID")] HRESULT NewGUID([out, retval] BSTR* retVal);
	//[id(0x0010e)] HRESULT ActiveCLRMethod(BSTR bstrObjID, BSTR bstrMethod, BSTR bstrParam, BSTR bstrData);
	[id(0x00110)] HRESULT DownLoadFile(BSTR strFileURL, BSTR bstrTargetFile, BSTR bstrActionXml);
	[id(0x00111)] HRESULT GetCtrlByName(IDispatch* pCtrl, BSTR bstrName, VARIANT_BOOL bFindInChild, [out, retval] IDispatch** ppCtrlDisp);
	[id(0x00112)] HRESULT GetGridFromHandle(LONGLONG hWnd, [out, retval] IGrid** ppRetGrid);
	[id(0x00113)] HRESULT GetCtrlValueByName(IDispatch* pCtrl, BSTR bstrName, VARIANT_BOOL bFindInChild, [out, retval] BSTR* bstrVal);
	[id(0x00114)] HRESULT SetCtrlValueByName(IDispatch* pCtrl, BSTR bstrName, VARIANT_BOOL bFindInChild, BSTR bstrVal);
	[id(0x00115), hidden] HRESULT CreateHubbleCtrl(BSTR bstrAppID, [out, retval] IHubbleCtrl** ppRetCtrl);
	[id(0x00118)] HRESULT GetWindowClientDefaultNode(IDispatch* pAddDisp, LONGLONG hParent, BSTR bstrWndClaName, BSTR bstrGalaxyClusterName, [out, retval] IGrid** ppGrid);
	[id(0x00119)] HRESULT GetDocTemplateXml(BSTR bstrCaption, BSTR bstrPath, BSTR bstrFilter, [out, retval] BSTR* bstrTemplatePath);
	[id(0x0011a)] HRESULT OpenTangramFile([out, retval] IHubbleDoc** ppDoc);
	[id(0x0011b)] HRESULT CreateHubbleEventObj([out, retval]IHubbleEventObj** ppHubbleEventObj);
	[id(0x0011c)] HRESULT FireHubbleEventObj(IHubbleEventObj* pHubbleEventObj);
	[id(0x0011d)] HRESULT ObserveGalaxys(LONGLONG hWnd, BSTR bstrGalaxys, BSTR bstrKey, BSTR bstrXml, VARIANT_BOOL bSaveToConfigFile);
	[id(0x0011e)] HRESULT DeletePage(LONGLONG PageHandle);
	[id(0x0011f)] HRESULT LoadDocComponent(BSTR bstrLib, [out, retval] LONGLONG* llAppProxy);
	[id(0x00120)] HRESULT OpenHubbleDocFile(BSTR bstrFilePath, [out, retval] IHubbleDoc** ppDoc);
	[id(0x00121)] HRESULT InitCLRApp(BSTR strInitXml, [out, retval] LONGLONG* llHandle);
	[id(0x00122), helpstring("method CreateOutLookObj")] HRESULT CreateOutLookObj(BSTR bstrObjType, int nType, BSTR bstrURL, [out, retval] IDispatch** ppRetDisp);
	[id(0x00123)] HRESULT NewWorkBench(BSTR bstrHubbleDoc, [out, retval] IWorkBenchWindow** ppWorkBenchWindow);
	[id(0x00124), helpstring("method Create ChromeWebBrowser")] HRESULT CreateBrowser(ULONGLONG hParentWnd, BSTR strUrls, [out, retval]IBrowser** ppRet);
	[id(0x00125)] HRESULT HubbleNotify(BSTR strXml1, BSTR strXml2, LONGLONG wParam, LONGLONG lParam);
	[id(0x00126)] HRESULT DeleteGalaxy(IGalaxy* pGalaxy);
	[id(0x00127)] HRESULT InitEclipseApp();
	[id(0x00128)] HRESULT SelectVSObj(BSTR bstrData, IDispatch* pVSObj, LONGLONG nHandle);

	[id(0x001000), helpstring("method HubbleCommand")] HRESULT HubbleCommand(IDispatch* RibbonControl);
	[id(0x001001), helpstring("method HubbleGetImage")] HRESULT HubbleGetImage(BSTR strValue, [out, retval] IPictureDisp** ppdispImage);
	[id(0x001002), helpstring("method HubbleGetVisible")] HRESULT HubbleGetVisible(IDispatch* RibbonControl, [out, retval] VARIANT* varVisible);
	[id(0x001003), helpstring("method HubbleOnLoad")] HRESULT HubbleOnLoad(IDispatch* RibbonControl);
	[id(0x001004), helpstring("method HubbleGetItemCount")] HRESULT HubbleGetItemCount(IDispatch* RibbonControl, [out, retval] long* nCount);
	[id(0x001005), helpstring("method HubbleGetItemLabel")] HRESULT HubbleGetItemLabel(IDispatch* RibbonControl, long nIndex, [out, retval] BSTR* bstrLabel);
	[id(0x001006), helpstring("method HubbleGetItemID")] HRESULT HubbleGetItemID(IDispatch* RibbonControl, long nIndex, [out, retval]BSTR* bstrID);
};

[
	object,
	uuid(19631222-1992-0612-1965-060119820003),
	dual,
	nonextensible,
	helpstring("IGalaxy Interface"),
	pointer_default(unique)
]
interface IGalaxy : IDispatch {
	[propget, id(DISPID_VALUE), helpstring("")] HRESULT Grid([in]VARIANT vIndex, [out, retval]IGrid** ppGrid);
	[propget, id(DISPID_NEWENUM), helpstring("")] HRESULT _NewEnum([out, retval]IUnknown** ppVal);
	[propget, id(1), helpstring("property HWND")] HRESULT HWND([out, retval] LONGLONG* pVal);
	[propget, id(2), helpstring("property VisibleGrid")] HRESULT VisibleGrid([out, retval] IGrid** pVal);
	[propget, id(3)] HRESULT CurrentNavigateKey([out, retval] BSTR* pVal);
	[propget, id(4)] HRESULT GalaxyCluster([out, retval] IGalaxyCluster** pVal);
	[propget, id(5)] HRESULT GalaxyData(BSTR bstrKey, [out, retval] VARIANT* pVal);
	[propput, id(5)] HRESULT GalaxyData(BSTR bstrKey, [in] VARIANT newVal);
	[propget, id(6), hidden] HRESULT DesignerState([out, retval] VARIANT_BOOL* pVal);
	[propput, id(6), hidden] HRESULT DesignerState([in] VARIANT_BOOL newVal);
	[propget, id(7), helpstring("")] HRESULT Count([out, retval]long* pCount);
	[propget, id(8), helpstring("property RootGrids")] HRESULT RootGrids([out, retval]IGridCollection** ppGridColletion);
	[propget, id(9)] HRESULT GalaxyXML([out, retval] BSTR* pVal);
	[propget, id(10)] HRESULT HubbleDoc([out, retval] IHubbleDoc** pVal);
	[propget, id(11)] HRESULT GalaxyType([out, retval] GalaxyType* pVal);
	[propget, id(12)] HRESULT Name([out, retval] BSTR* pVal);
	[propget, id(13)] HRESULT HostBrowser([out, retval] IBrowser** ppChromeWebBrowser);
	[propget, id(14)] HRESULT HostWebPage([out, retval] IWebPage** ppChromeWebPage);

	[id(101), helpstring("method Detach")] HRESULT Detach(void);
	[id(102), helpstring("method Attach")] HRESULT Attach(void);
	[id(103), helpstring("method ModifyHost")] HRESULT ModifyHost(LONGLONG hHostWnd);
	[id(104)] HRESULT Observe(BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
	[id(105)] HRESULT GetXml(BSTR bstrRootName, [out, retval] BSTR* bstrRet);
};

[
	object,
	uuid(19631222-1992-0612-1965-060119820017),
	dual,
	nonextensible,
	helpstring("IGridCollection Interface"),
	pointer_default(unique)
]
interface IGridCollection : IDispatch {
	[propget, id(1), helpstring("")] HRESULT GridCount([out, retval]long* pCount);
	[propget, id(DISPID_VALUE), helpstring("")] HRESULT Item([in]long iIndex, [out, retval]IGrid** ppTopWindow);
	[propget, id(DISPID_NEWENUM), helpstring("")] HRESULT _NewEnum([out, retval]IUnknown** ppVal);
};

[
	object,
	uuid(19631222-1992-0612-1965-060119820002),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IGalaxyCluster : IDispatch {
	[propget, id(DISPID_VALUE), helpstring("")] HRESULT Galaxy([in]VARIANT vIndex, [out, retval]IGalaxy** ppGalaxy);
	[propget, id(DISPID_NEWENUM), helpstring("")] HRESULT _NewEnum([out, retval]IUnknown** ppVal);
	[propget, id(1), helpstring("")] HRESULT Count([out, retval]long* pCount);
	[propget, id(2)] HRESULT xtml(BSTR strKey, [out, retval] BSTR* pVal);
	[propput, id(2)] HRESULT xtml(BSTR strKey, [in] BSTR newVal);
	[propget, id(3)] HRESULT Extender(BSTR bstrExtenderName, [out, retval] IDispatch** pVal);
	[propput, id(3)] HRESULT Extender(BSTR bstrExtenderName, [in] IDispatch* newVal);
	[propget, id(4)] HRESULT Grid(BSTR bstrNodeName, [out, retval] IGrid** pVal);
	[propget, id(5)] HRESULT XObject(BSTR bstrName, [out, retval] IDispatch** pVal);
	[propget, id(6)] HRESULT GalaxyName(LONGLONG hHwnd, [out, retval] BSTR* pVal);
	[propget, id(7)] HRESULT Handle([out, retval] LONGLONG* pVal);
	[propget, id(8)] HRESULT Width([out, retval] long* pVal);
	[propput, id(8)] HRESULT Width([in] long newVal);
	[propget, id(9)] HRESULT Height([out, retval] long* pVal);
	[propput, id(9)] HRESULT Height([in] long newVal);
	[propget, id(10)] HRESULT GridNames([out, retval] BSTR* pVal);
	[propget, id(11)] HRESULT Parent([out, retval] IGalaxyCluster** pVal);
	[propget, id(13)] HRESULT GalaxyClusterXML([out, retval] BSTR* pVal);
	[propput, id(14)] HRESULT ConfigName([in] BSTR newVal);
	[propget, id(15)] HRESULT CurrentDesignGalaxyType([out, retval] GalaxyType* pVal);
	[propget, id(16)] HRESULT CurrentDesignNode([out, retval] IGrid** pVal);

	[id(101)] HRESULT CreateGalaxy(VARIANT ParentObj, VARIANT HostWnd, BSTR bstrGalaxyName, [out, retval] IGalaxy** pRetGalaxy);
	[id(102)] HRESULT Observe(IDispatch* Parent, BSTR CtrlName, BSTR GalaxyName, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
	[id(103)] HRESULT ObserveCtrl(VARIANT Ctrl, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
	[id(104)] HRESULT GetGrid(BSTR bstrGalaxyName, BSTR bstrNodeName, [out, retval] IGrid** pRetNode);
	[id(105)] HRESULT GetCtrlInGrid(BSTR NodeName, BSTR CtrlName, [out, retval] IDispatch** ppCtrl);
	[id(106)] HRESULT GetGalaxyFromCtrl(IDispatch* ctrl, [out, retval] IGalaxy** ppGalaxy);
	[id(107)] HRESULT ConnectHubbleCtrl(IHubbleCtrl* eventSource);
	[id(108)] HRESULT CreateGalaxyWithDefaultNode(ULONGLONG hGalaxyWnd, BSTR bstrGalaxyName, BSTR bstrDefaultNodeKey, BSTR bstrXml, VARIANT_BOOL bSaveToConfig, [out, retval] IGrid** ppGrid);
	[id(109)] HRESULT ObserveGalaxys(BSTR bstrGalaxys, BSTR bstrKey, BSTR bstrXml, VARIANT_BOOL bSaveToConfigFile);
};

[
	object,
	uuid(19631222-1992-0612-1965-060119825D34),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IWorkBenchWindow : IDispatch {
	[propget, id(DISPID_VALUE), helpstring("")] HRESULT Ctrl([in]VARIANT vIndex, [out, retval]IEclipseCtrl** ppCtrl);
	[propget, id(DISPID_NEWENUM), helpstring("")] HRESULT _NewEnum([out, retval]IUnknown** ppVal);
	[propget, id(1), helpstring("")] HRESULT Count([out, retval]long* pCount);
	[propget, id(2)] HRESULT Handle([out, retval] LONGLONG* pVal);
	[propget, id(3)] HRESULT HubbleCtrl(LONGLONG hWnd, [out, retval] IEclipseCtrl** pVal);
	[propget, id(4)] HRESULT GalaxyCluster([out, retval] IGalaxyCluster** pVal);
	[propget, id(5)] HRESULT Galaxy([out, retval] IGalaxy** pVal);

	[id(101)] HRESULT Active();
	[id(102), hidden] HRESULT CloseTangramUI();
	[id(103)] HRESULT Observe(BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	[id(104)] HRESULT ObserveEx(BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	[id(105)] HRESULT ObserveInView(int nIndex, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120180828),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IBrowser : IDispatch {
	[propget, id(1)] HRESULT RemoteGrid([out, retval] IGrid** pVal);
	[propput, id(1)] HRESULT RemoteGrid([in]IGrid* newVal);

	[id(101)] HRESULT OpenURL(BSTR bstrURL, BrowserWndOpenDisposition nDisposition, BSTR bstrKey, BSTR bstrXml);
	[id(102)] HRESULT AddURLs(BSTR bstrURLs);
	//[id(104)] HRESULT ExtendEx(BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	//[id(105)] HRESULT ExtendInView(int nIndex, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppRetGrid);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120180903),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IWebPage : IDispatch {
	[propget, id(1)] HRESULT HostWnd([out, retval] LONGLONG* pVal);
	[propput, id(1)] HRESULT HostWnd([in] LONGLONG newVal);
	[id(101)] HRESULT CreateForm(BSTR bstrKey, LONGLONG hParent, [out, retval]IDispatch** pRetForm);
};

[
	object,
	uuid(19631222-1992-0612-1965-060119650606),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IOfficeObject : IDispatch {
	[id(1)] HRESULT Show(VARIANT_BOOL bShow);
	[id(2)] HRESULT Observe(BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	[id(3)] HRESULT UnloadHubble();
};

[
	object,
	uuid(19631222-1992-0612-1965-0601198231DC),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IHubbleCtrl : IDispatch {
	[propget, id(1), helpstring("property HWND")] HRESULT HWND([out, retval] LONGLONG* pVal);
	[propget, id(2)] HRESULT Hubble([out, retval] IHubble** pVal);
	[propget, id(1000)] HRESULT tag([out, retval] VARIANT* pVal);
	[propput, id(1000)] HRESULT tag([in] VARIANT newVal);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120161001),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IHubbleAppCtrl : IHubbleCtrl {
	[propput, id(100)] HRESULT AppCtrl([in] VARIANT_BOOL newVal);
};

[
	object,
	uuid(19631222-1992-0612-1965-060120160912),
	dual,
	nonextensible,
	pointer_default(unique)
]
interface IEclipseCtrl : IHubbleCtrl {
	[propput, id(101), helpstring("Universe Galaxy Window for SWT")] HRESULT Handle(BSTR bstrHandleName, [in] LONGLONG newVal);
	[propget, id(102)] HRESULT EclipseViewHandle([out, retval] LONGLONG* pVal);
	[propget, id(103)] HRESULT GalaxyCluster([out, retval] IGalaxyCluster** pVal);
	[propget, id(104)] HRESULT WorkBenchWindow([out, retval] IWorkBenchWindow** pVal);
	[propget, id(105)] HRESULT TopGalaxyCluster([out, retval] IGalaxyCluster** pVal);
	[propget, id(106)] HRESULT TopGalaxy([out, retval] IGalaxy** pVal);
	[propget, id(107)] HRESULT ActiveTopGrid([out, retval] IGrid** pVal);
	[propget, id(108), helpstring("property AppKeyValue")] HRESULT AppKeyValue(BSTR bstrKey, [out, retval] VARIANT* pVal);
	[propput, id(108), helpstring("property AppKeyValue")] HRESULT AppKeyValue(BSTR bstrKey, [in] VARIANT newVal);

	[id(201)] HRESULT Observe(BSTR bstrGalaxyName, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	[id(202)] HRESULT ObserveEx(BSTR bstrGalaxyName, BSTR bstrKey, BSTR bstrXml, [out, retval] IGrid** ppGrid);
	[id(203)] HRESULT InitCtrl(BSTR bstrXml);
};

[
	uuid(19631222-1992-0612-1965-060119820911),
	version(1.0),
	helpstring("Universe 8.0 Type Library")
]
library Universe
{
	[
		uuid(19631222-1992-0612-1965-060119821002),
		helpstring("_IHubble Interface")
	]
	dispinterface _IHubble
	{
		properties:
		methods:
			[id(1), helpstring("method OpenComplete")] HRESULT OpenComplete(LONG hWnd, BSTR bstrUrl, IGrid * pRootGrid);
			[id(2)] HRESULT Close();
			[id(3)] HRESULT HubbleEvent(IHubbleEventObj* NotifyObj);
	};

	[
		uuid(19631222-1992-0612-1965-060119990606),
		appobject,
		helpstring("Universe Class")
	]
	coclass Universe
	{
		[default] interface IHubble;
		[default, source] dispinterface _IHubble;
	};

	[
		uuid(19631222-1992-0612-1965-060119821001),
		helpstring("_IGridEvents Interface")
	]
	dispinterface _IGridEvents
	{
		properties:
		methods:
			[id(1), helpstring("method ObserveComplete")] HRESULT ObserveComplete();
			[id(2)] HRESULT Destroy();
			[id(3), helpstring("WndGrid Addin Object Created")] HRESULT GridAddInCreated(IDispatch* pAddIndisp, BSTR bstrAddInID, BSTR bstrAddInXml);
			[id(4)] HRESULT GridAddInsCreated();
			[id(5)] HRESULT NodeDocumentComplete(IDispatch* ExtenderDisp, BSTR bstrURL);
			[id(6)] HRESULT ControlNotify(IGrid* sender, LONG NotifyCode, LONG CtrlID, long CtrlHandle, BSTR CtrlClassName);
			[id(7)] HRESULT TabChange(LONG ActivePage, LONG OldPage);
			[id(8)] HRESULT IPCMessageReceived(BSTR bstrChannel, BSTR bstrData);
	};

	[
		uuid(19631222-1992-0612-1965-060119821992),
		helpstring("_IHubbleObjEvents Interface")
	]
	dispinterface _IHubbleObjEvents
	{
	properties:
	methods:
		[id(1)] HRESULT PageLoaded(IDispatch * sender, BSTR url);
		[id(2)] HRESULT NodeCreated(IGrid* pGridCreated);
		[id(3)] HRESULT AddInCreated(IGrid* pRootGrid, IDispatch* pAddIn, BSTR bstrID, BSTR bstrAddInXml);
		[id(4)] HRESULT BeforeExtendXml(BSTR bstrXml, long hWnd);
		[id(5)] HRESULT ExtendXmlComplete(BSTR bstrXml, long hWnd, IGrid* pRetRootNode);
		[id(6)] HRESULT Destroy();
		[id(7)] HRESULT NodeMouseActivate(IGrid* pActiveNode);
		[id(8)] HRESULT ClrControlCreated(IGrid* Node, IDispatch* Ctrl, BSTR CtrlName, long CtrlHandle);
		[id(9)] HRESULT TabChange(IGrid* sender, LONG ActivePage, LONG OldPage);
		[id(10)] HRESULT Event(IDispatch* sender, IDispatch* EventArg);
		[id(11)] HRESULT ControlNotify(IGrid* sender, LONG NotifyCode, LONG CtrlID, long CtrlHandle, BSTR CtrlClassName);
		[id(12)] HRESULT HubbleEvent(IHubbleEventObj* NotifyObj);
		[id(13)] HRESULT IPCMsg(IGalaxy* pSender, BSTR bstrType, BSTR bstrContent, BSTR bstrFeature);
	};

	[
		uuid(19631222-1992-0612-1965-060120160930),
		helpstring("_IHubbleAppEvents Interface")
	]
	dispinterface _IHubbleAppEvents
	{
	properties:
	methods:
		[id(1)] HRESULT HubbleEvent(IHubbleEventObj * NotifyObj);
	};

	[
		uuid(19631222-1992-0612-1965-060120071001),
		control
	]
	coclass HubbleCtrl
	{
		[default] interface IHubbleCtrl;
		[default, source] dispinterface 	_IHubbleObjEvents;
	};

	[
		hidden,
		uuid(19631222-1992-0612-1965-060100000000)
	]
	coclass UniverseExtender
	{
		interface IEclipseCtrl;
		interface IEclipseExtender;
		interface IOfficeExtender;
		interface IHubbleAppCtrl;
	};
};
